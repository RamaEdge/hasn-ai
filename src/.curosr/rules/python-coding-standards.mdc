---
globs: *.py
description: Python coding standards and conventions for HASN-AI
---

# Python Coding Standards

## Code Style & Formatting

- **Line Length**: 100 characters (configured in [pyproject.toml](mdc:pyproject.toml))
- **Formatter**: Black with line-length=100
- **Linter**: Ruff with E, F, I rules enabled
- **Target Python**: 3.11+ (as specified in pyproject.toml)

## Import Organization

Follow the import structure used in [src/api/main.py](mdc:src/api/main.py):
```python
# Standard library imports first
import logging
import os
import sys
from datetime import datetime

# Third-party imports
import uvicorn
from fastapi import FastAPI, HTTPException

# Local imports with path adjustments
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from core.cognitive_brain_network import CognitiveBrainNetwork
```

## Brain Network Patterns

### Neuron Implementation
Follow the pattern in [src/core/simplified_brain_network.py](mdc:src/core/simplified_brain_network.py):
- Use dataclasses for configuration: `@dataclass class NetworkConfig`
- Implement spiking dynamics with temporal parameters
- Include learning mechanisms (STDP/Hebbian)
- Add comprehensive logging with emojis: `print(f"ðŸ§  BrainNetwork initialized")`

### API Route Structure
Follow the modular pattern in [src/api/routes/](mdc:src/api/routes/):
- Separate route files by functionality
- Use FastAPI dependency injection
- Include proper error handling and logging
- Return structured responses with success/error indicators

## Documentation Standards

- Use comprehensive docstrings for classes and methods
- Include emoji indicators for different system components:
  - Brain networks
  - API endpoints  
  - Training systems
  - Configuration
  - Warnings/errors

## Error Handling

Follow the pattern in [src/api/main.py](mdc:src/api/main.py):
```python
try:
    # Brain initialization
    logger.info("Initializing Brain Networks...")
    # ... initialization code
    logger.info("BrainNetwork initialized")
except Exception as e:
    logger.error(f"Failed to initialize: {e}")
    raise
```

## Testing Patterns

Follow the structure in [src/tests/](mdc:src/tests/):
- Use descriptive test names: `test_import_adapters()`
- Test both success and failure cases
- Include integration tests for brain networks
- Test API endpoints with proper mocking

## Configuration Management

- Use dataclasses for configuration objects
- Store configuration in [pyproject.toml](mdc:pyproject.toml) for tooling
- Environment-specific settings in [requirements.txt](mdc:requirements.txt)
- Runtime configuration through environment variables

## Performance Considerations

- The project prioritizes the **SimpleBrainNetwork** implementation (2.3x faster)
- Use numpy for numerical computations
- Implement sparse connections for efficiency
- Include memory management for large networks